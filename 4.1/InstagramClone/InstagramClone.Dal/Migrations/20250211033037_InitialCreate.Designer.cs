// <auto-generated />
using System;
using InstagramClone.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InstagramClone.Dal.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20250211033037_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccountAccount", b =>
                {
                    b.Property<long>("FolleowersAccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("FollowingAccountId")
                        .HasColumnType("bigint");

                    b.HasKey("FolleowersAccountId", "FollowingAccountId");

                    b.HasIndex("FollowingAccountId");

                    b.ToTable("AccountAccount");
                });

            modelBuilder.Entity("InstagramClone.Dal.Entities.Account", b =>
                {
                    b.Property<long>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AccountId"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AccountId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("InstagramClone.Dal.Entities.Comment", b =>
                {
                    b.Property<long>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CommentId"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentText")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReplyToCommentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("WritingTime")
                        .HasColumnType("datetime2");

                    b.HasKey("CommentId");

                    b.HasIndex("AccountId");

                    b.HasIndex("PostId");

                    b.HasIndex("ReplyToCommentId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("InstagramClone.Dal.Entities.Post", b =>
                {
                    b.Property<long>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PostId"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("PostType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("SetTime")
                        .HasColumnType("datetime2");

                    b.HasKey("PostId");

                    b.HasIndex("AccountId");

                    b.ToTable("Post", (string)null);
                });

            modelBuilder.Entity("AccountAccount", b =>
                {
                    b.HasOne("InstagramClone.Dal.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("FolleowersAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InstagramClone.Dal.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("FollowingAccountId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InstagramClone.Dal.Entities.Comment", b =>
                {
                    b.HasOne("InstagramClone.Dal.Entities.Account", "Account")
                        .WithMany("Comments")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InstagramClone.Dal.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InstagramClone.Dal.Entities.Comment", "ReplyToComment")
                        .WithMany("Replies")
                        .HasForeignKey("ReplyToCommentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Post");

                    b.Navigation("ReplyToComment");
                });

            modelBuilder.Entity("InstagramClone.Dal.Entities.Post", b =>
                {
                    b.HasOne("InstagramClone.Dal.Entities.Account", "Account")
                        .WithMany("Posts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("InstagramClone.Dal.Entities.Account", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("InstagramClone.Dal.Entities.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("InstagramClone.Dal.Entities.Post", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
